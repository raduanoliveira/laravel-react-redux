{"version":3,"file":"react-picky.cjs.production.min.js","sources":["../src/lib/includes.ts","../src/lib/utils.ts","../src/lib/format.ts","../src/Placeholder.tsx","../src/Filter.tsx","../src/Option.tsx","../src/SelectAll.tsx","../src/Button.tsx","../src/Picky.tsx","../src/lib/debounce.ts"],"sourcesContent":["/**\n * Check if a string contains a value\n */\nexport function includes(\n  str: string,\n  term: string,\n  caseSensitive: boolean = false\n): boolean {\n  if (!caseSensitive) {\n    return (\n      String(str)\n        .toLowerCase()\n        .indexOf(String(term).toLowerCase()) > -1\n    );\n  } else {\n    return String(str).indexOf(String(term)) > -1;\n  }\n}\n","import { OptionsType, OptionType, ComplexOptionType } from 'types';\n\nexport const isDataObject = (\n  obj: OptionType | undefined,\n  valueKey: string | undefined,\n  labelKey: string | undefined\n): boolean => {\n  if (typeof labelKey === 'undefined' || typeof valueKey === 'undefined') {\n    return false;\n  }\n  return (\n    typeof obj === 'object' &&\n    obj.hasOwnProperty(valueKey) &&\n    obj.hasOwnProperty(labelKey)\n  );\n};\n\nexport const hasItem = (\n  all: OptionsType | OptionType | undefined,\n  item: OptionType,\n  valueKey?: string,\n  labelKey?: string,\n  returnIndex: boolean = false\n) => {\n  if (!all || !item) return false;\n  if (Array.isArray(all)) {\n    if (isDataObject(item, valueKey, labelKey)) {\n      const find = all.findIndex(\n        opt =>\n          (opt as ComplexOptionType)[valueKey!] ===\n          (item as ComplexOptionType)[valueKey!]\n      );\n      if (returnIndex) {\n        return find;\n      }\n      return find > -1;\n    } else {\n      const indexOfItem = all.indexOf(item);\n      if (returnIndex) {\n        return indexOfItem;\n      }\n      return indexOfItem > -1;\n    }\n  } else {\n    if (isDataObject(item, valueKey, labelKey)) {\n      return (\n        (all as ComplexOptionType)[valueKey!] ===\n        (item as ComplexOptionType)[valueKey!]\n      );\n    }\n    return all === item;\n  }\n};\n\nexport const hasItemIndex = (\n  all: OptionsType | OptionType,\n  item: OptionType,\n  valueKey?: string,\n  labelKey?: string\n): number => hasItem(all, item, valueKey, labelKey, true) as number;\n\nexport const keyExtractor = (\n  item: OptionType,\n  valueKey?: string,\n  labelKey?: string\n) =>\n  isDataObject(item, valueKey, labelKey)\n    ? (item as ComplexOptionType)[valueKey!]\n    : item;\nexport const labelExtractor = (\n  item: OptionType,\n  valueKey?: string,\n  labelKey?: string\n) =>\n  isDataObject(item, valueKey, labelKey)\n    ? (item as ComplexOptionType)[labelKey!]\n    : item;\n\nexport function sortCollection(array: any[], valueKey?: string): any[] {\n  if (valueKey) {\n    return array.sort((a, b) => (a[valueKey] < b[valueKey] ? -1 : 1));\n  } else {\n    return array.sort((a, b) => (a < b ? -1 : 1));\n  }\n}\n\nexport function arraysEqual(left: any[], right: any[]): boolean {\n  if (left.length !== right.length) return false;\n  const leftLen = left.length;\n  let i = leftLen;\n  while (i) {\n    if (left[i] !== right[i]) return false;\n    i--;\n  }\n  return true;\n}\n\nexport const asArray = (obj: any): any[] => obj || [];\n","function split(str: string): string {\n  let a: number = 1;\n  let res: string = '';\n\n  const parts = (str || '').split('%');\n  const len: number = parts.length;\n\n  if (len > 0) {\n    res += parts[0];\n  }\n\n  for (let i = 1; i < len; i++) {\n    if (parts[i][0] === 's' || parts[i][0] === 'd') {\n      let value = arguments[a++];\n      res += parts[i][0] === 'd' ? Math.floor(value) : value;\n    } else if (parts[i][0]) {\n      res += '%' + parts[i][0];\n    } else {\n      i++;\n      res += '%' + parts[i][0];\n    }\n\n    res += parts[i].substring(1);\n  }\n\n  return res;\n}\n\nconst regex = /%[sdj]/;\n\nexport function format(message: string, ...args: any[]) {\n  if (regex.test(message)) {\n    return split.apply(null, arguments as any);\n  }\n  return Array.from(args).join(' ');\n}\n","import * as React from 'react';\nimport { format } from './lib/format';\nimport { isDataObject } from './lib/utils';\nimport { includes } from './lib/includes';\nimport {\n  OptionsType,\n  OptionType,\n  ComplexOptionType,\n  SimpleOptionType,\n  SelectionState,\n} from './types';\n\nconst isEmptyValue = (value: any) =>\n  value === null ||\n  value === undefined ||\n  (Array.isArray(value) && !value.length);\n\ntype PlaceholderProps = {\n  placeholder?: string;\n  value: OptionsType | OptionType | undefined;\n  numberDisplayed: number;\n  multiple: boolean;\n  valueKey?: string;\n  labelKey?: string;\n  manySelectedPlaceholder?: string;\n  allSelectedPlaceholder?: string;\n  allSelected: SelectionState;\n};\nconst Placeholder: React.FC<PlaceholderProps> = React.memo(\n  ({\n    placeholder,\n    value,\n    numberDisplayed,\n    multiple,\n    valueKey,\n    labelKey,\n    manySelectedPlaceholder,\n    allSelectedPlaceholder,\n    allSelected,\n  }) => {\n    let message: string = '';\n    if (isEmptyValue(value)) {\n      message = placeholder || '';\n    } else {\n      if (Array.isArray(value) && multiple) {\n        // If type is array and values length less than number displayed\n        // join the values\n        if (value.length <= numberDisplayed) {\n          message = value\n            .map(opt => {\n              if (isDataObject(opt, valueKey, labelKey)) {\n                return (opt as ComplexOptionType)[labelKey!];\n              }\n              return opt;\n            })\n            .join(', ');\n        } else {\n          // if many selected and not all selected then use the placeholder\n          if (manySelectedPlaceholder && allSelected !== 'all') {\n            // if it doesn't include the sprintf token then just use the placeholder\n            message = includes(manySelectedPlaceholder, '%s')\n              ? format(manySelectedPlaceholder, value.length)\n              : manySelectedPlaceholder;\n            //If all selected and there is an allselectedplaceholder use that\n          } else if (allSelected && allSelectedPlaceholder) {\n            // if it doesn't include the sprintf token then just use the placeholder\n            message = includes(allSelectedPlaceholder, '%s')\n              ? format(allSelectedPlaceholder, value.length)\n              : allSelectedPlaceholder;\n          }\n        }\n      } else {\n        let tempValue = Array.isArray(value) ? value[0] : value;\n        if (isDataObject(tempValue, valueKey, labelKey)) {\n          message = (tempValue as ComplexOptionType)[labelKey!];\n        } else {\n          message = String(tempValue as SimpleOptionType);\n        }\n      }\n    }\n\n    return (\n      <span\n        className={isEmptyValue(value) ? 'picky__placeholder' : undefined}\n        data-testid=\"picky_placeholder\"\n      >\n        {message}\n      </span>\n    );\n  },\n  areEqual\n);\n\nPlaceholder.defaultProps = {\n  placeholder: 'None selected',\n  allSelectedPlaceholder: '%s selected',\n  manySelectedPlaceholder: '%s selected',\n};\nPlaceholder.displayName = 'Picky(Placeholder)';\n\nfunction areEqual(prevProps: PlaceholderProps, nextProps: PlaceholderProps) {\n  return (\n    prevProps.multiple === nextProps.multiple &&\n    prevProps.value === nextProps.value &&\n    prevProps.numberDisplayed === nextProps.numberDisplayed &&\n    prevProps.allSelected === nextProps.allSelected &&\n    prevProps.allSelectedPlaceholder === nextProps.allSelectedPlaceholder\n  );\n}\nexport { Placeholder };\n","import * as React from 'react';\nexport type FilterProps = {\n  onFilterChange(term: string): void;\n  tabIndex: number | undefined;\n  placeholder?: string;\n} & React.RefAttributes<HTMLInputElement>;\n\nconst Filter: React.FC<FilterProps> = React.forwardRef(\n  (\n    { placeholder, tabIndex, onFilterChange },\n    ref: React.Ref<HTMLInputElement>\n  ) => {\n    return (\n      <div className=\"picky__filter\">\n        <input\n          ref={ref}\n          type=\"text\"\n          className=\"picky__filter__input\"\n          data-testid=\"picky__filter__input\"\n          placeholder={placeholder}\n          tabIndex={tabIndex}\n          aria-label=\"filter options\"\n          onChange={e => onFilterChange(e.target.value)}\n        />\n      </div>\n    );\n  }\n);\n\nFilter.defaultProps = {\n  placeholder: 'Filter...',\n};\n\nFilter.displayName = 'Picky(Filter)';\n\nexport { Filter };\n","import * as React from 'react';\nimport { isDataObject } from './lib/utils';\nimport { OptionType, ComplexOptionType } from './types';\n\ntype OptionProps = {\n  isSelected: boolean;\n  valueKey?: string;\n  labelKey?: string;\n  id: string;\n  item: OptionType;\n  style?: React.CSSProperties;\n  selectValue(option: OptionType): void;\n  multiple: boolean;\n  tabIndex: number | undefined;\n  disabled: boolean;\n};\nconst Option: React.FC<OptionProps> = React.memo(\n  ({\n    id,\n    item,\n    isSelected,\n    labelKey,\n    valueKey,\n    selectValue,\n    style,\n    multiple,\n    tabIndex,\n    disabled,\n  }) => {\n    const cssClass = isSelected ? 'option selected' : 'option';\n    const body = isDataObject(item, labelKey, valueKey)\n      ? (item as ComplexOptionType)[labelKey!]\n      : item;\n    const inputType = multiple ? 'checkbox' : 'radio';\n    const select = () => !disabled && selectValue(item);\n\n    return (\n      <div\n        tabIndex={tabIndex}\n        id={id}\n        role=\"option\"\n        style={style}\n        data-testid=\"option\"\n        data-selected={isSelected ? 'selected' : ''}\n        aria-selected={isSelected}\n        className={cssClass}\n        onClick={select}\n        onKeyPress={e => {\n          e.preventDefault();\n          if (!disabled) {\n            selectValue(item);\n          }\n        }}\n      >\n        <input\n          type={inputType}\n          readOnly\n          tabIndex={-1}\n          disabled={disabled}\n          checked={isSelected}\n          aria-label={body}\n          data-testid={'option-checkbox'}\n        />\n        {body}\n      </div>\n    );\n  },\n  areEqual\n);\n\nOption.displayName = 'Picky(Option)';\n\nfunction areEqual(prevProps: OptionProps, nextProps: OptionProps) {\n  return (\n    prevProps.multiple === nextProps.multiple &&\n    prevProps.isSelected === nextProps.isSelected &&\n    prevProps.id === nextProps.id &&\n    prevProps.item === nextProps.item &&\n    prevProps.tabIndex === nextProps.tabIndex &&\n    prevProps.disabled === nextProps.disabled\n  );\n}\nexport { Option };\n","import * as React from 'react';\nimport { SelectionState } from './types';\n\ntype SelectAllProps = {\n  tabIndex: number | undefined;\n  disabled: boolean;\n  allSelected: SelectionState;\n  id: string;\n  selectAllText?: string;\n  toggleSelectAll(): void;\n  visible: boolean;\n};\nconst SelectAll: React.FC<SelectAllProps> = React.memo(\n  ({\n    tabIndex,\n    disabled,\n    allSelected,\n    id,\n    selectAllText,\n    toggleSelectAll,\n    visible,\n  }) => {\n    const checkboxRef = React.createRef<HTMLInputElement>();\n    if (!visible) {\n      return null;\n    }\n\n    React.useEffect(() => {\n      if (checkboxRef.current === null) return;\n      checkboxRef.current.indeterminate = allSelected === 'partial';\n    }, [allSelected]);\n    return (\n      <div\n        tabIndex={tabIndex}\n        role=\"option\"\n        data-testid=\"selectall\"\n        id={id + '-option-' + 'selectall'}\n        data-selectall=\"true\"\n        aria-selected={allSelected === 'all'}\n        className={allSelected === 'all' ? 'option selected' : 'option'}\n        onClick={toggleSelectAll}\n        onKeyPress={toggleSelectAll}\n      >\n        <input\n          type=\"checkbox\"\n          ref={checkboxRef}\n          readOnly\n          data-testid=\"selectall-checkbox\"\n          tabIndex={-1}\n          checked={allSelected === 'all'}\n          aria-label=\"select all\"\n          disabled={disabled}\n        />\n        <span data-testid=\"select-all-text\">{selectAllText}</span>\n      </div>\n    );\n  },\n  areEqual\n);\n\nSelectAll.displayName = 'Picky(SelectAll)';\n\nfunction areEqual(prevProps: SelectAllProps, nextProps: SelectAllProps) {\n  return (\n    prevProps.tabIndex === nextProps.tabIndex &&\n    prevProps.disabled === nextProps.disabled &&\n    prevProps.allSelected === nextProps.allSelected &&\n    prevProps.selectAllText === nextProps.selectAllText &&\n    prevProps.visible === nextProps.visible\n  );\n}\nexport { SelectAll };\n","import * as React from 'react';\n\ntype ButtonProps = {} & React.DetailedHTMLProps<\n  React.ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n>;\nconst Button: React.FC<ButtonProps> = ({\n  id,\n  disabled,\n  onClick,\n  children,\n  className,\n  ...rest\n}) => {\n  const buttonId = `${id}__button`;\n  const classes = [\n    'picky__input',\n    disabled ? 'picky__input--disabled' : '',\n    className,\n  ].join(' ');\n\n  return (\n    <button\n      id={buttonId}\n      type=\"button\"\n      className={classes}\n      onClick={onClick}\n      data-testid=\"picky-input\"\n      disabled={disabled}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n\nButton.displayName = 'Picky(Button)';\nexport { Button };\n","import * as React from 'react';\nimport { debounce } from './lib/debounce';\nimport { includes } from './lib/includes';\nimport {\n  isDataObject,\n  hasItem,\n  keyExtractor,\n  hasItemIndex,\n  sortCollection,\n  arraysEqual,\n  asArray,\n} from './lib/utils';\nimport { Placeholder } from './Placeholder';\nimport { Filter } from './Filter';\nimport { Option } from './Option';\nimport './Picky.css';\nimport { SelectAll } from './SelectAll';\nimport { Button } from './Button';\nimport {\n  RenderListProps,\n  SelectAllMode,\n  RenderSelectAllProps,\n  RenderProps,\n  OptionsType,\n  OptionType,\n  ComplexOptionType,\n  SelectionState,\n} from './types';\n\ntype PickyState = {\n  selectedValue: OptionsType | OptionType | null;\n  open?: boolean;\n  filtered?: boolean;\n  filteredOptions: OptionsType;\n  allSelected: SelectionState;\n};\n\nexport type PickyProps = {\n  /**\n   * The ID for the component, used for accessibility\n   *\n   * @type {string}\n   * @memberof PickyProps\n   */\n  id: string;\n  /**\n   * Default placeholder text\n   *\n   * @type {string}\n   * @memberof PickyProps\n   */\n  placeholder?: string;\n\n  /**\n   * The value of the Picky.\n   * Picky is a controlled component so use this in conjunction with onChange and update the value accordingly\n   *\n   * @type {PickyValue}\n   * @memberof PickyProps\n   */\n  value?: OptionsType | OptionType;\n\n  /**\n   * The number of items to be displayed before the placeholder turns to \"5 selected\"\n   *\n   * @type {number} [3]\n   * @memberof PickyProps\n   */\n  numberDisplayed?: number;\n\n  /**\n   * True if multiple options can be selected\n   *\n   * @type {boolean}\n   * @memberof PickyProps\n   */\n  multiple?: boolean;\n\n  /**\n   * Options for the Picky component either [1, 2, 3] or [{label: \"1\", value: 1}] in conjunction with valueKey and labelKey props\n   *\n   * @type {any[]} [[]]\n   * @memberof PickyProps\n   */\n  options: any[];\n\n  /**\n   * Called when the selected value changes, use this to re-set the value prop\n   *\n   * @memberof PickyProps\n   */\n  onChange: (value: OptionsType | OptionType) => any;\n\n  /**\n   * Used to control whether the Picky is open by default\n   *\n   * @type {boolean}\n   * @memberof PickyProps\n   */\n  open?: boolean;\n\n  /**\n   * True if you want a select all option at the top of the dropdown.\n   * Won't appear if multiple is false\n   *\n   * @type {boolean}\n   * @memberof PickyProps\n   */\n  includeSelectAll?: boolean;\n\n  /**\n   * True if you want a filter input at the top of the dropdown, used to filter items.\n   *\n   * @type {boolean}\n   * @memberof PickyProps\n   */\n  includeFilter?: boolean;\n\n  /**\n   * Used to debounce onFilterChange events. Set value to zero to disable debounce. Duration is in milliseconds.\n   *\n   * @type {number} [300]\n   * @memberof PickyProps\n   */\n  filterDebounce?: number;\n\n  /**\n   * The max height of the dropdown, height is in px.\n   *\n   * @type {number} [300]\n   * @memberof PickyProps\n   */\n  dropdownHeight?: number;\n\n  /**\n   * Callback when options have been filtered.\n   *\n   * @memberof PickyProps\n   */\n  onFiltered?: (filteredOptions: any[]) => any;\n\n  /**\n   * Called when dropdown is opened\n   *\n   * @memberof PickyProps\n   */\n  onOpen?: () => any;\n\n  /**\n   * Called when dropdown is closed\n   *\n   * @memberof PickyProps\n   */\n  onClose?: () => any;\n\n  /**\n   *  Indicates which key is the value in an object. Used when supplied options are objects.\n   *\n   * @type {string}\n   * @memberof PickyProps\n   */\n  valueKey?: string;\n  /**\n   *  Indicates which key is the label in an object. Used when supplied options are objects.\n   *\n   * @type {string}\n   * @memberof PickyProps\n   */\n  labelKey?: string;\n\n  /**\n   * Render prop for individual options\n   *\n   * @memberof PickyProps\n   */\n  render?: (props: RenderProps) => any;\n\n  /**\n   * Tab index for accessibility\n   *\n   * @type {PickyTabIndex} [0]\n   * @memberof PickyProps\n   */\n  tabIndex?: number | undefined;\n\n  /**\n   * True if the dropdown should be permanently open.\n   *\n   * @type {boolean}\n   * @memberof PickyProps\n   */\n  keepOpen?: boolean;\n\n  /**\n   * The placeholder when the number of items are higher than {numberDisplayed} and all aren't selected.\n   * Default \"%s selected\" where %s is the number of items selected.\n   *\n   * @type {string} [\"%s selected\"]\n   * @memberof PickyProps\n   */\n  manySelectedPlaceholder?: string;\n\n  /**\n   * Default \"%s selected\" where %s is the number of items selected. This gets used when all options are selected.\n   *\n   * @type {string} [\"%s selected\"]\n   * @memberof PickyProps\n   */\n  allSelectedPlaceholder?: string;\n\n  /**\n   * Default select all text\n   *\n   * @type {string} [\"Select all\"]\n   * @memberof PickyProps\n   */\n  selectAllText?: string;\n\n  /**\n   * Render prop for rendering a custom select all component\n   *\n   * @memberof PickyProps\n   */\n  renderSelectAll?: (props: RenderSelectAllProps) => any;\n\n  /**\n   * If set to true, will focus the filter by default when opened.\n   *\n   * @type {boolean}\n   * @memberof PickyProps\n   */\n  defaultFocusFilter?: boolean;\n\n  /**\n   * Used to supply a class to the root picky component. Helps when using Picky with a CSS-in-JS library like styled-components\n   *\n   * @type {string}\n   * @memberof PickyProps\n   */\n  className?: string;\n\n  /**\n   * Render prop for whole list, you can use this to add virtualization/windowing if necessary.\n   *\n   * @memberof PickyProps\n   */\n  renderList?: (props: RenderListProps) => any;\n\n  /**\n   * Override the placeholder of the filter\n   *\n   * @type {string}\n   * @memberof PickyProps\n   */\n  filterPlaceholder?: string;\n  /**\n   * Will provide the input value of filter to the picky dropdown, so that if we have a larger list of options then we can only supply the matching options based on this value.\n   */\n  getFilterValue?: (term: string) => any;\n  /**\n   *  If true options will be returned when they match case, defaults to false\n   */\n  caseSensitiveFilter?: boolean;\n\n  /**\n   * Pass additional props the the button component\n   *\n   * @type {React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>}\n   * @memberof PickyProps\n   */\n  buttonProps?: React.DetailedHTMLProps<\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  >;\n\n  /**\n   * True if you want a disabled Picky\n   */\n  disabled?: boolean;\n\n  /**\n   * Allows for additional functionalty with select all and filtering, see the docs.\n   */\n  selectAllMode?: SelectAllMode;\n  /**\n   * When true the filter input will be cleared when the dropdown is closed\n   *\n   * @type {boolean}\n   */\n  clearFilterOnClose?: boolean;\n  /**\n   * A string function which takes the filter term and returns a new filter term.\n   *\n   * Useful for trimming the filter term.\n   *\n   * @type {StringFunc}\n   */\n  filterTermProcessor?: (term: string) => string;\n};\n\nclass Picky extends React.PureComponent<PickyProps, PickyState> {\n  static defaultProps = {\n    id: 'picky',\n    numberDisplayed: 3,\n    options: [],\n    filterDebounce: 150,\n    dropdownHeight: 300,\n    onChange: () => {},\n    tabIndex: 0,\n    keepOpen: true,\n    selectAllText: 'Select all',\n    selectAllMode: 'default',\n    filterTermProcessor: (term: string) => term,\n  };\n  node: HTMLDivElement | null = null;\n  filter: HTMLInputElement | null = null;\n  constructor(props: PickyProps) {\n    super(props);\n    this.state = {\n      selectedValue: props.value || (props.multiple ? [] : null),\n      open: props.open,\n      filtered: false,\n      filteredOptions: [],\n      allSelected: 'none',\n    };\n    this.toggleDropDown = this.toggleDropDown.bind(this);\n    this.toggleSelectAll = this.toggleSelectAll.bind(this);\n    this.onFilterChange = this.onFilterChange.bind(this);\n    this.selectValue = this.selectValue.bind(this);\n    this.allSelected = this.allSelected.bind(this);\n    this.handleOutsideClick = this.handleOutsideClick.bind(this);\n    this.isItemSelected = this.isItemSelected.bind(this);\n    this.focusFilterInput = this.focusFilterInput.bind(this);\n    this.getValue = this.getValue.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      allSelected: this.allSelected(),\n    });\n    this.focusFilterInput(!!this.state.open);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.handleOutsideClick, false);\n  }\n\n  componentDidUpdate(prevProps: PickyProps) {\n    if (\n      this.props.options !== prevProps.options ||\n      this.props.value !== prevProps.value\n    ) {\n      if (!this.props.multiple) return;\n      let valuesEqual = Array.isArray(prevProps.value)\n        ? arraysEqual(prevProps.value, this.props.value as OptionsType)\n        : prevProps.value === this.props.value;\n\n      let optsEqual = arraysEqual(prevProps.options, this.props.options);\n      const currentOptions = this.state.filtered\n        ? this.state.filteredOptions\n        : this.props.options;\n      const currentValues = this.state.filtered\n        ? this.state.filteredOptions.filter(value => {\n            if (Array.isArray(this.props.value)) {\n              return this.props.value.includes(value);\n            }\n            return true;\n          })\n        : this.props.value;\n      this.setState({\n        allSelected: !(valuesEqual && optsEqual)\n          ? this.allSelected(currentValues as OptionsType, currentOptions)\n          : this.allSelected(),\n      });\n    }\n  }\n\n  selectValue(val: string | number) {\n    const valueLookup = this.props.value;\n    if (this.props.multiple && Array.isArray(valueLookup)) {\n      const itemIndex = hasItemIndex(\n        valueLookup,\n        val,\n        this.props.valueKey,\n        this.props.labelKey\n      );\n\n      let selectedValue: OptionsType = [];\n      if (itemIndex > -1) {\n        selectedValue = [\n          ...valueLookup.slice(0, itemIndex),\n          ...valueLookup.slice(itemIndex + 1),\n        ];\n      } else {\n        selectedValue = [...(this.props.value as OptionsType), val];\n      }\n      this.setState(\n        {\n          allSelected: this.allSelected(selectedValue),\n        },\n        () => {\n          this.props.onChange(selectedValue);\n        }\n      );\n    } else {\n      this.props.onChange(val);\n    }\n  }\n  /**\n   * Get the value of a given option or value safely\n   *\n   * @param {*} option\n   * @returns\n   * @memberof Picky\n   */\n  getValue(option: OptionType) {\n    return typeof this.props.valueKey !== 'undefined'\n      ? (option as ComplexOptionType)[this.props.valueKey]\n      : option;\n  }\n  /**\n   * Determine whether all items are selected\n   *\n   * @returns {Boolean}\n   * @memberof Picky\n   */\n  allSelected(\n    overrideSelected?: any[],\n    overrideOptions?: any[]\n  ): SelectionState {\n    const { value, options } = this.props;\n    const selectedValue = overrideSelected || value;\n    const selectedOptions = overrideOptions || options;\n\n    // If there are no options we are getting a false positive for all items being selected\n    if (selectedOptions && selectedOptions.length === 0) {\n      return 'none';\n    }\n    let copiedOptions = selectedOptions.map(this.getValue);\n    let copiedValues = Array.isArray(selectedValue)\n      ? selectedValue.map(this.getValue)\n      : [];\n\n    const areEqual = arraysEqual(\n      sortCollection(copiedValues),\n      sortCollection(copiedOptions)\n    );\n    if (areEqual) {\n      return 'all';\n    } else if (copiedValues.length > 0) {\n      return 'partial';\n    } else {\n      return 'none';\n    }\n  }\n  /**\n   * Toggles select all\n   *\n   * @memberof Picky\n   */\n  toggleSelectAll() {\n    if (this.props.disabled) return;\n    this.setState(\n      state => {\n        return {\n          ...state,\n          allSelected: this.state.allSelected === 'all' ? 'none' : 'all',\n        };\n      },\n      () => {\n        if (this.state.allSelected !== 'all') {\n          if (this.state.filtered) {\n            const diff = asArray(this.props.value).filter(\n              item => !this.state.filteredOptions.includes(item)\n            );\n            this.props.onChange(diff);\n          } else {\n            this.props.onChange([]);\n          }\n        } else {\n          if (this.state.filtered) {\n            let newValues = [\n              ...(this.props.value as any[]),\n              ...this.state.filteredOptions,\n            ];\n            this.props.onChange(newValues);\n          } else {\n            this.props.onChange(this.props.options);\n          }\n        }\n      }\n    );\n  }\n\n  isItemSelected(item: OptionType): boolean {\n    return hasItem(\n      this.props.value,\n      item,\n      this.props.valueKey,\n      this.props.labelKey\n    ) as boolean;\n  }\n\n  renderOptions() {\n    const items = this.state.filtered\n      ? this.state.filteredOptions\n      : this.props.options;\n\n    const {\n      labelKey,\n      valueKey,\n      multiple,\n      render,\n      tabIndex,\n      renderList,\n      disabled,\n    } = this.props;\n    if (renderList) {\n      return renderList({\n        items,\n        selected: this.props.value,\n        multiple,\n        tabIndex,\n        getIsSelected: this.isItemSelected,\n        selectValue: this.selectValue,\n        disabled,\n      });\n    }\n    return items.map((item, index) => {\n      // Create a key based on the options value\n      const key = keyExtractor(item, valueKey, labelKey);\n\n      const isSelected = this.isItemSelected(item);\n      // If render prop supplied for items call that.\n      if (typeof render === 'function') {\n        return render({\n          index,\n          item,\n          isSelected,\n          selectValue: this.selectValue,\n          labelKey: labelKey,\n          valueKey: valueKey,\n          multiple: multiple,\n          disabled,\n        });\n      } else {\n        // Render a simple option\n        return (\n          <Option\n            key={key}\n            item={item}\n            isSelected={isSelected}\n            selectValue={this.selectValue}\n            labelKey={labelKey}\n            valueKey={valueKey}\n            multiple={Boolean(multiple)}\n            tabIndex={tabIndex}\n            disabled={Boolean(disabled)}\n            id={this.props.id + '-option-' + index}\n          />\n        );\n      }\n    });\n  }\n  /**\n   * Called when Filter term changes. Sets filteredOptions and filtered state.\n   *\n   * @param {any} term\n   * @returns\n   * @memberof Picky\n   */\n  onFilterChange(term: string) {\n    const processedTerm =\n      typeof this.props.filterTermProcessor === 'function'\n        ? this.props.filterTermProcessor(term)\n        : term;\n\n    /**\n     * getFilterValue function will provide the input value of filter to the picky dropdown, so that if we have a larger list of options then we can only supply the matching options based on this value\n     */\n    if (this.props.getFilterValue) {\n      this.props.getFilterValue(processedTerm);\n    }\n    if (!processedTerm.trim()) {\n      return this.setState({\n        filtered: false,\n        filteredOptions: [],\n        allSelected: asArray(this.props.value).length > 0 ? 'partial' : 'none',\n      });\n    }\n    const isObject = isDataObject(\n      this.props.options && this.props.options[0],\n      this.props.valueKey,\n      this.props.labelKey\n    );\n    const filteredOptions = this.props.options.filter(option => {\n      if (isObject) {\n        return includes(\n          option[this.props.labelKey!],\n          processedTerm,\n          !!this.props.caseSensitiveFilter\n        );\n      }\n      return includes(option, processedTerm, this.props.caseSensitiveFilter);\n    });\n    this.setState(\n      {\n        filtered: true,\n        filteredOptions,\n      },\n      () => {\n        if (this.props.onFiltered) {\n          this.props.onFiltered(filteredOptions);\n        }\n      }\n    );\n  }\n  /**\n   *\n   * Called by a click event listener. Used to determine any clicks that occur outside of the component.\n   * @param {MouseEvent} e\n   * @returns\n   * @memberof Picky\n   */\n  handleOutsideClick(e: any) {\n    // If keep open then don't toggle dropdown\n    // If radio and not keepOpen then auto close it on selecting a value\n    // If radio and click to the filter input then don't toggle dropdown\n    const keepOpen = this.props.keepOpen || this.props.multiple;\n    if (this.node && this.node.contains(e.target) && keepOpen) {\n      return;\n    }\n    if (this.filter && this.filter.contains(e.target)) {\n      return;\n    }\n    this.toggleDropDown();\n  }\n\n  focusFilterInput(isOpen: boolean) {\n    if (!this.filter) return;\n    if (isOpen && this.props.defaultFocusFilter) {\n      this.filter.focus();\n    }\n    if (!isOpen && this.props.clearFilterOnClose === true) {\n      this.filter.value = '';\n    }\n  }\n  /**\n   * Toggle state of dropdown\n   *\n   * @memberof Picky\n   */\n  toggleDropDown() {\n    if (!this.state.open) {\n      // Add event listener to listen for clicks to determine if click occured outside the component or not\n      document.addEventListener('click', this.handleOutsideClick, false);\n    } else {\n      // Remove\n      document.removeEventListener('click', this.handleOutsideClick, false);\n    }\n\n    this.setState(\n      state => {\n        return {\n          ...state,\n          // Toggle open state\n          open: !state.open,\n          filtered: this.props.clearFilterOnClose ? false : state.filtered,\n          filteredOptions: this.props.clearFilterOnClose\n            ? []\n            : state.filteredOptions,\n        };\n      },\n      () => {\n        const isOpen = !!this.state.open;\n        // Prop callbacks\n        this.focusFilterInput(isOpen);\n        if (isOpen && this.props.onOpen) {\n          this.props.onOpen();\n        } else if (!isOpen && this.props.onClose) {\n          this.props.onClose();\n        }\n      }\n    );\n  }\n\n  get filterDebounce() {\n    const { filterDebounce } = this.props;\n    const amount = filterDebounce || 0;\n    return (amount || 0) > 0\n      ? debounce(this.onFilterChange, amount)\n      : this.onFilterChange;\n  }\n\n  get showSelectAll(): boolean {\n    const { renderSelectAll, multiple, includeSelectAll } = this.props;\n    return Boolean(\n      !renderSelectAll &&\n        includeSelectAll &&\n        multiple &&\n        ((this.props.selectAllMode === 'default' && !this.state.filtered) ||\n          this.props.selectAllMode === 'filtered')\n    );\n  }\n  render() {\n    const {\n      className,\n      placeholder,\n      value,\n      multiple,\n      numberDisplayed,\n      includeFilter,\n      valueKey,\n      labelKey,\n      tabIndex,\n      dropdownHeight,\n      renderSelectAll,\n      filterPlaceholder,\n      disabled,\n      buttonProps,\n    } = this.props;\n    const { open } = this.state;\n    let ariaOwns = '';\n    if (open) {\n      ariaOwns += this.props.id + '-list';\n    }\n    const buttonId = `${this.props.id}__button`;\n    const dropdownStyle: React.CSSProperties = {\n      maxHeight: dropdownHeight,\n      overflowY: 'scroll',\n    };\n    return (\n      <div\n        ref={node => {\n          this.node = node;\n        }}\n        className={['picky', className].join(' ')}\n        id={this.props.id}\n        role=\"combobox\"\n        aria-controls={buttonId}\n        aria-expanded={open}\n        aria-haspopup={open}\n        aria-owns={ariaOwns}\n        tabIndex={tabIndex}\n      >\n        <Button\n          id={`${this.props.id}__button`}\n          disabled={disabled}\n          onClick={this.toggleDropDown}\n          {...buttonProps}\n        >\n          <Placeholder\n            allSelected={this.state.allSelected}\n            placeholder={placeholder}\n            manySelectedPlaceholder={this.props.manySelectedPlaceholder}\n            allSelectedPlaceholder={this.props.allSelectedPlaceholder}\n            value={value}\n            multiple={Boolean(multiple)}\n            numberDisplayed={numberDisplayed!}\n            valueKey={valueKey}\n            labelKey={labelKey}\n            data-testid=\"placeholder-component\"\n          />\n        </Button>\n        <div\n          className=\"picky__dropdown\"\n          id={this.props.id + '-list'}\n          aria-hidden={!open}\n          hidden={!open}\n          style={open ? dropdownStyle : { visibility: 'hidden' }}\n        >\n          {includeFilter && (\n            <Filter\n              tabIndex={tabIndex}\n              ref={filter => (this.filter = filter)}\n              placeholder={filterPlaceholder}\n              onFilterChange={this.filterDebounce}\n            />\n          )}\n          {renderSelectAll ? (\n            renderSelectAll({\n              filtered: Boolean(this.state.filtered),\n              allSelected: this.state.allSelected,\n              toggleSelectAll: this.toggleSelectAll,\n              tabIndex,\n              multiple: Boolean(multiple),\n              disabled: Boolean(disabled),\n            })\n          ) : (\n            <SelectAll\n              visible={this.showSelectAll}\n              tabIndex={tabIndex}\n              disabled={!!disabled}\n              allSelected={this.state.allSelected}\n              id={this.props.id}\n              selectAllText={this.props.selectAllText}\n              toggleSelectAll={this.toggleSelectAll}\n            />\n          )}\n          {open && <div data-testid=\"dropdown\">{this.renderOptions()}</div>}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport { Picky };\n","export const debounce = (fn: Function, delay: number) => {\n  let timeoutID: NodeJS.Timer | null = null;\n  return function(...args: any[]) {\n    if (timeoutID) {\n      clearTimeout(timeoutID);\n    }\n    //@ts-ignore\n    const that: any = this as any;\n    timeoutID = setTimeout(() => {\n      fn.apply(that, args);\n    }, delay);\n  };\n};\n"],"names":["includes","str","term","caseSensitive","String","indexOf","toLowerCase","isDataObject","obj","valueKey","labelKey","hasOwnProperty","hasItem","all","item","returnIndex","Array","isArray","find","findIndex","opt","indexOfItem","sortCollection","array","sort","a","b","arraysEqual","left","right","length","i","asArray","split","res","parts","len","value","arguments","Math","floor","substring","regex","format","message","args","test","apply","from","join","isEmptyValue","Placeholder","React","placeholder","numberDisplayed","multiple","manySelectedPlaceholder","allSelectedPlaceholder","allSelected","map","tempValue","className","undefined","areEqual","prevProps","nextProps","defaultProps","displayName","Filter","ref","onFilterChange","type","tabIndex","onChange","e","target","Option","id","isSelected","selectValue","style","disabled","cssClass","body","role","onClick","onKeyPress","preventDefault","readOnly","checked","SelectAll","selectAllText","toggleSelectAll","visible","checkboxRef","current","indeterminate","Button","children","rest","buttonId","classes","Picky","props","state","selectedValue","open","filtered","filteredOptions","toggleDropDown","_this","bind","handleOutsideClick","isItemSelected","focusFilterInput","getValue","componentDidMount","setState","this","componentWillUnmount","document","removeEventListener","componentDidUpdate","options","valuesEqual","optsEqual","currentOptions","currentValues","filter","_this2","val","valueLookup","itemIndex","slice","_this3","option","overrideSelected","overrideOptions","selectedOptions","copiedOptions","copiedValues","_this4","diff","newValues","renderOptions","items","render","renderList","selected","getIsSelected","index","key","keyExtractor","_this5","Boolean","processedTerm","filterTermProcessor","getFilterValue","trim","isObject","_this6","caseSensitiveFilter","onFiltered","keepOpen","node","contains","isOpen","defaultFocusFilter","focus","clearFilterOnClose","addEventListener","_this7","onOpen","onClose","includeFilter","renderSelectAll","filterPlaceholder","buttonProps","ariaOwns","dropdownStyle","maxHeight","dropdownHeight","overflowY","_this8","hidden","visibility","filterDebounce","showSelectAll","fn","delay","timeoutID","amount","clearTimeout","that","setTimeout","includeSelectAll","selectAllMode"],"mappings":"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"}