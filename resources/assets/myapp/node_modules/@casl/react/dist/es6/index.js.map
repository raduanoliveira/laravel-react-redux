{"version":3,"file":"index.js","sources":["../../src/Can.ts","../../src/factory.ts","../../src/hooks/useAbility.ts"],"sourcesContent":["import { Children, ReactNodeArray, PureComponent, Fragment, createElement } from 'react';\nimport {\n  Unsubscribe,\n  AbilityTuple,\n  SubjectType,\n  AnyAbility,\n  Generics,\n  Abilities,\n  IfString,\n} from '@casl/ability';\n\nconst noop = () => {};\nconst renderChildren = Fragment\n  ? (children?: ReactNodeArray) => {\n    if (!children) {\n      return null;\n    }\n\n    return children.length > 1\n      ? createElement(Fragment, null, ...children)\n      : Children.only(children);\n  }\n  : Children.only;\n\ntype AbilityCanProps<\n  T extends Abilities,\n  Else = IfString<T, { do: T } | { I: T }>\n> = T extends AbilityTuple\n  ? { do: T[0], on: T[1], field?: string } |\n  { I: T[0], a: Extract<T[1], SubjectType>, field?: string } |\n  { I: T[0], an: Extract<T[1], SubjectType>, field?: string } |\n  { I: T[0], this: Exclude<T[1], SubjectType>, field?: string }\n  : Else;\n\ninterface ExtraProps {\n  not?: boolean\n  passThrough?: boolean\n}\n\ninterface CanExtraProps<T extends AnyAbility> extends ExtraProps {\n  ability: T\n}\n\ninterface BoundCanExtraProps<T extends AnyAbility> extends ExtraProps {\n  ability?: T\n}\n\nexport type CanProps<T extends AnyAbility> =\n  AbilityCanProps<Generics<T>['abilities']> & CanExtraProps<T>;\nexport type BoundCanProps<T extends AnyAbility> =\n  AbilityCanProps<Generics<T>['abilities']> & BoundCanExtraProps<T>;\n\nexport class Can<\n  T extends AnyAbility,\n  IsBound extends boolean = false\n> extends PureComponent<IsBound extends true ? BoundCanProps<T> : CanProps<T>> {\n  private _isAllowed: boolean = false;\n  private _ability: T | null = null;\n  private _unsubscribeFromAbility: Unsubscribe = noop;\n\n  componentWillUnmount() {\n    this._unsubscribeFromAbility();\n  }\n\n  private _connectToAbility(ability?: T) {\n    if (ability === this._ability) {\n      return;\n    }\n\n    this._unsubscribeFromAbility();\n    this._ability = null;\n\n    if (ability) {\n      this._ability = ability;\n      this._unsubscribeFromAbility = ability.on('updated', () => this.forceUpdate());\n    }\n  }\n\n  get allowed() {\n    return this._isAllowed;\n  }\n\n  private _canRender(): boolean {\n    const props: any = this.props;\n    const subject = props.of || props.a || props.an || props.this || props.on;\n    const can = props.not ? 'cannot' : 'can';\n\n    return props.ability[can](props.I || props.do, subject, props.field);\n  }\n\n  render() {\n    this._connectToAbility(this.props.ability);\n    this._isAllowed = this._canRender();\n    return this.props.passThrough || this._isAllowed ? this._renderChildren() : null;\n  }\n\n  private _renderChildren() {\n    const { children, ability } = this.props;\n    const elements = typeof children === 'function'\n      ? children(this._isAllowed, ability)\n      : children;\n\n    return renderChildren(elements);\n  }\n}\n","import { createElement as h, ComponentClass, Consumer, StatelessComponent } from 'react';\nimport { AnyAbility } from '@casl/ability';\nimport { Can, BoundCanProps } from './Can';\n\ninterface BoundCanClass<T extends AnyAbility> extends ComponentClass<BoundCanProps<T>> {\n  new (props: BoundCanProps<T>, context?: any): Can<T, true>\n}\n\nexport function createCanBoundTo<T extends AnyAbility>(ability: T): BoundCanClass<T> {\n  return class extends Can<T, true> {\n    static defaultProps = { ability } as BoundCanClass<T>['defaultProps'];\n  };\n}\n\nexport function createContextualCan<T extends AnyAbility>(\n  Getter: Consumer<T>\n): StatelessComponent<BoundCanProps<T>> {\n  return (props: BoundCanProps<T>) => h(Getter, null, (ability: T) => h(Can, {\n    ability,\n    ...props,\n  } as any));\n}\n","import React from 'react';\nimport { AnyAbility } from '@casl/ability';\n\nexport function useAbility<T extends AnyAbility>(context: React.Context<T>): T {\n  if (process.env.NODE_ENV !== 'production' && typeof React.useContext !== 'function') {\n    throw new Error('You must use React >= 16.8 in order to use useAbility()');\n  }\n\n  const ability = React.useContext<T>(context);\n  const [rules, setRules] = React.useState<T['rules']>();\n\n  React.useEffect(() => ability.on('updated', (event) => {\n    if (event.rules !== rules) {\n      setRules(event.rules);\n    }\n  }), []);\n\n  return ability;\n}\n"],"names":["noop","renderChildren","Fragment","children","length","createElement","Children","only","Can","PureComponent","_isAllowed","_ability","_unsubscribeFromAbility","componentWillUnmount","_connectToAbility","ability","this","on","forceUpdate","_canRender","props","subject","of","a","an","can","not","I","do","field","render","passThrough","_renderChildren","elements","createCanBoundTo","defaultProps","createContextualCan","Getter","h","useAbility","context","process","env","NODE_ENV","React","useContext","Error","rules","setRules","useState","useEffect","event"],"mappings":"wFAWA,MAAMA,EAAO,OACPC,EAAiBC,EAClBC,GACIA,EAIEA,EAASC,OAAS,EACrBC,EAAcH,EAAU,QAASC,GACjCG,EAASC,KAAKJ,GALT,KAOTG,EAASC,KA8BN,MAAMC,UAGHC,qCACAC,GAAsB,OACtBC,EAAqB,UACrBC,EAAuCZ,EAE/Ca,4BACOD,IAGCE,EAAkBC,GACpBA,IAAYC,KAAKL,SAIhBC,SACAD,EAAW,KAEZI,SACGJ,EAAWI,OACXH,EAA0BG,EAAQE,GAAG,UAAW,IAAMD,KAAKE,sCAK3DF,KAAKN,EAGNS,UACAC,EAAaJ,KAAKI,MAClBC,EAAUD,EAAME,IAAMF,EAAMG,GAAKH,EAAMI,IAAMJ,EAAMJ,MAAQI,EAAMH,GACjEQ,EAAML,EAAMM,IAAM,SAAW,aAE5BN,EAAML,QAAQU,GAAKL,EAAMO,GAAKP,EAAMQ,GAAIP,EAASD,EAAMS,OAGhEC,qBACOhB,EAAkBE,KAAKI,MAAML,cAC7BL,EAAaM,KAAKG,IAChBH,KAAKI,MAAMW,aAAef,KAAKN,EAAaM,KAAKgB,IAAoB,KAGtEA,UACA7B,SAAEA,EAAFY,QAAYA,GAAYC,KAAKI,MAC7Ba,EAA+B,mBAAb9B,EACpBA,EAASa,KAAKN,EAAYK,GAC1BZ,SAEGF,EAAegC,IC9FnB,SAASC,EAAuCnB,sBAC9C,cAAcP,MACZ2B,aAAe,CAAEpB,QAAAA,KAIrB,SAASqB,EACdC,UAEQjB,GAA4BkB,EAAED,EAAQ,KAAOtB,GAAeuB,EAAE9B,iBACpEO,QAAAA,GACGK,KChBA,SAASmB,EAAiCC,MAClB,eAAzBC,QAAQC,IAAIC,UAAyD,mBAArBC,EAAMC,iBAClD,IAAIC,MAAM,iEAGZ/B,EAAU6B,EAAMC,WAAcL,IAC7BO,EAAOC,GAAYJ,EAAMK,kBAEhCL,EAAMM,UAAU,IAAMnC,EAAQE,GAAG,UAAYkC,IACvCA,EAAMJ,QAAUA,GAClBC,EAASG,EAAMJ,SAEf,IAEGhC"}