{"version":3,"file":"index.js","sources":["../../src/utils.ts","../../src/Rule.ts","../../src/RulesAnalyzer.ts","../../src/PureAbility.ts","../../src/matchers/conditions.ts","../../src/matchers/field.ts","../../src/Ability.ts","../../src/AbilityBuilder.ts","../../src/ForbiddenError.ts"],"sourcesContent":["import { AnyObject, Subject, SubjectClass, ForcedSubject, AliasesMap } from './types';\n\nexport function wrapArray<T>(value: T[] | T): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n\nexport function setByPath(object: AnyObject, path: string, value: unknown): void {\n  let ref = object;\n  let lastKey = path;\n\n  if (path.indexOf('.') !== -1) {\n    const keys = path.split('.');\n\n    lastKey = keys.pop()!;\n    ref = keys.reduce((res, prop) => {\n      res[prop] = res[prop] || {};\n      return res[prop] as AnyObject;\n    }, object);\n  }\n\n  ref[lastKey] = value;\n}\n\nconst TYPE_FIELD = '__caslSubjectType__';\nexport function setSubjectType<\n  T extends string,\n  U extends Record<PropertyKey, any>\n>(type: T, object: U): U & ForcedSubject<T> {\n  if (object) {\n    if (!object.hasOwnProperty(TYPE_FIELD)) {\n      Object.defineProperty(object, TYPE_FIELD, { value: type });\n    } else if (type !== object[TYPE_FIELD]) {\n      throw new Error(`Trying to cast object to subject type ${type} but previously it was casted to ${object[TYPE_FIELD]}`);\n    }\n  }\n\n  return object as U & ForcedSubject<T>;\n}\n\nexport function detectSubjectType<T extends Subject>(subject?: T): string {\n  if (!subject) {\n    return 'all';\n  }\n\n  if (typeof subject === 'string') {\n    return subject;\n  }\n\n  if (subject.hasOwnProperty(TYPE_FIELD)) {\n    return (subject as any)[TYPE_FIELD];\n  }\n\n  const Type = typeof subject === 'function' ? subject : subject.constructor;\n  return (Type as SubjectClass).modelName || Type.name;\n}\n\nexport function expandActions(aliasMap: AliasesMap, rawActions: string | string[]) {\n  let actions = wrapArray(rawActions);\n  let i = 0;\n\n  while (i < actions.length) {\n    const action = actions[i++];\n\n    if (aliasMap.hasOwnProperty(action)) {\n      actions = actions.concat(aliasMap[action]);\n    }\n  }\n\n  return actions;\n}\n\nfunction assertAliasMap(aliasMap: AliasesMap) {\n  if (aliasMap.manage) {\n    throw new Error('Cannot add alias for \"manage\" action because it is reserved');\n  }\n\n  Object.keys(aliasMap).forEach((alias) => {\n    const hasError = alias === aliasMap[alias]\n      || Array.isArray(aliasMap[alias]) && (\n        aliasMap[alias].indexOf(alias) !== -1 || aliasMap[alias].indexOf('manage') !== -1\n      );\n\n    if (hasError) {\n      throw new Error(`Attempt to alias action to itself: ${alias} -> ${aliasMap[alias]}`);\n    }\n  });\n}\n\nexport const identity = <T>(x: T) => x;\nexport function createAliasResolver(aliasMap: AliasesMap) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertAliasMap(aliasMap);\n  }\n\n  return (action: string | string[]) => expandActions(aliasMap, action);\n}\n","import { wrapArray } from './utils';\nimport {\n  MatchConditions,\n  RuleOptions,\n  MatchField,\n  Abilities,\n  ToAbilityTypes,\n  Normalize\n} from './types';\nimport { RawRule } from './RawRule';\n\ntype Tuple<A extends Abilities> = Normalize<ToAbilityTypes<A>>;\n\nexport class Rule<A extends Abilities, C> {\n  private readonly _matchConditions: MatchConditions | undefined;\n  private readonly _matchField: MatchField<string> | undefined;\n  public readonly action!: Tuple<A>[0] | Tuple<A>[0][];\n  public readonly subject!: Tuple<A>[1] | Tuple<A>[1][];\n  public readonly inverted!: boolean;\n  public readonly conditions!: C | undefined;\n  public readonly fields!: string[] | undefined;\n  public readonly reason!: string | undefined;\n\n  constructor(rule: RawRule<ToAbilityTypes<A>, C>, options: RuleOptions<A, C>) {\n    this.action = options.resolveAction((rule as any).actions || (rule as any).action);\n    this.subject = rule.subject;\n    this.inverted = !!rule.inverted;\n    this.conditions = rule.conditions;\n    this.reason = rule.reason;\n    this.fields = !rule.fields || rule.fields.length === 0\n      ? undefined\n      : wrapArray(rule.fields);\n\n    if ('actions' in rule) {\n      // eslint-disable-next-line\n      console.warn('Rule `actions` field is deprecated. Use `action` field instead');\n    }\n\n    if (this.conditions && options.conditionsMatcher) {\n      this._matchConditions = options.conditionsMatcher(this.conditions);\n    }\n\n    if (this.fields && options.fieldMatcher) {\n      this._matchField = options.fieldMatcher(this.fields);\n    }\n  }\n\n  matchesConditions(object: Normalize<A>[1] | undefined): boolean {\n    if (!this._matchConditions) {\n      return true;\n    }\n\n    if (!object || typeof object === 'string' || typeof object === 'function') {\n      return !this.inverted;\n    }\n\n    return this._matchConditions(object as object);\n  }\n\n  matchesField(field: string | undefined): boolean {\n    if (!this._matchField) {\n      return true;\n    }\n\n    if (!field) {\n      return !this.inverted;\n    }\n\n    return this._matchField(field);\n  }\n}\n","import { RawRuleFrom } from './RawRule';\nimport { Abilities, RuleOptions } from './types';\n\nexport default class RulesAnalyzer<A extends Abilities, C> {\n  public _isAllInverted: boolean;\n  public _hasPerFieldRules: boolean = false;\n  public _hasRuleWithEmptyFields: boolean = false;\n\n  constructor(hasRules: boolean) {\n    this._isAllInverted = hasRules;\n    this._analyze = this._analyze.bind(this);\n  }\n\n  _analyze({ fields, inverted }: RawRuleFrom<A, C>) {\n    this._isAllInverted = this._isAllInverted && !!inverted;\n\n    if (!this._hasRuleWithEmptyFields && Array.isArray(fields) && !fields.length) {\n      this._hasRuleWithEmptyFields = true;\n    }\n\n    if (!this._hasPerFieldRules && fields && fields.length) {\n      this._hasPerFieldRules = true;\n    }\n  }\n\n  _validate(ruleOptions: RuleOptions<A, C>) {\n    if (this._isAllInverted) {\n      // eslint-disable-next-line\n      console.warn('Make sure your ability has direct rules, not only inverted ones. Otherwise `ability.can` will always return `false`.');\n    }\n\n    if (this._hasRuleWithEmptyFields) {\n      // eslint-disable-next-line\n      console.warn('[error in next major version]: There are rules with `fields` property being an empty array. This results in the same as not passing fields at all. Make sure to remove empty array or pass fields.');\n    }\n\n    if (this._hasPerFieldRules && !ruleOptions.fieldMatcher) {\n      throw new Error('Field level restrictions are ignored because \"fieldMatcher\" option is not specified. Did you unintentionally used PureAbility instead of Ability?');\n    }\n  }\n}\n","import { Rule } from './Rule';\nimport { RawRuleFrom } from './RawRule';\nimport { wrapArray, detectSubjectType, identity } from './utils';\nimport {\n  DetectSubjectType,\n  ResolveAction,\n  ValueOf,\n  CanParameters,\n  Abilities,\n  Normalize,\n  ConditionsMatcher,\n  FieldMatcher,\n  RuleOptions\n} from './types';\nimport RulesAnalyzer from './RulesAnalyzer';\n\nexport type Unsubscribe = () => void;\n\nexport interface AbilityOptions<A extends Abilities, Conditions> {\n  /** @deprecated use \"detectSubjectType\" option instead */\n  subjectName?: this['detectSubjectType']\n  detectSubjectType?: DetectSubjectType<Normalize<A>[1]>\n  conditionsMatcher?: ConditionsMatcher<Conditions>\n  fieldMatcher?: FieldMatcher\n  resolveAction?: ResolveAction<Normalize<A>[0]>\n}\n\nexport type AnyAbility = PureAbility<any, any>;\nexport type Generics<T extends AnyAbility> = T extends AnyAbility\n  ? { abilities: T['_za'], conditions: T['_zc'] }\n  : never;\n\nexport type RuleOf<T extends AnyAbility> =\n  Rule<Generics<T>['abilities'], Generics<T>['conditions']>;\nexport type RawRuleOf<T extends AnyAbility> =\n  RawRuleFrom<Generics<T>['abilities'], Generics<T>['conditions']>;\n\nexport type AbilityOptionsOf<T extends AnyAbility> =\n  AbilityOptions<Generics<T>['abilities'], Generics<T>['conditions']>;\n\nexport interface AbilityEvent<T extends AnyAbility> {\n  ability: T\n}\nexport interface UpdateEvent<T extends AnyAbility> extends AbilityEvent<T> {\n  rules: RawRuleOf<T>[]\n}\nexport type EventHandler<Event> = (event: Event) => void;\n\ntype Events<T extends AnyAbility> =\n  Record<keyof EventsMap<T>, EventHandler<ValueOf<EventsMap<T>>>[]>;\n\ntype EventsMap<T extends AnyAbility> = {\n  update: UpdateEvent<T>\n  updated: UpdateEvent<T>\n};\n\ntype RuleIndex<A extends Abilities, C> = {\n  [subject: string]: {\n    [action: string]: {\n      [priority: number]: Rule<A, C>\n    }\n  }\n};\n\ntype RuleIterator<A extends Abilities, C> = (rule: RawRuleFrom<A, C>, index: number) => void;\n\nexport type AbilityClass<T extends AnyAbility> = new (\n  rules?: RawRuleOf<T>[],\n  options?: AbilityOptionsOf<T>\n) => T;\n\nexport class PureAbility<A extends Abilities = Abilities, Conditions = unknown> {\n  private _hasPerFieldRules: boolean = false;\n  private _mergedRules: Record<string, Rule<A, Conditions>[]> = {};\n  private _events: Events<this> = Object.create(null);\n  private _indexedRules: RuleIndex<A, Conditions> = {};\n  private readonly _ruleOptions!: RuleOptions<A, Conditions>;\n  public readonly detectSubjectType!: DetectSubjectType<Normalize<A>[1]>;\n  private _rules: this['rules'] = [];\n  public readonly rules!: RawRuleFrom<A, Conditions>[];\n  /** hack property type to improve inference */\n  public readonly _za!: A;\n  /** hack property type to improve inference */\n  public readonly _zc!: Conditions;\n\n  constructor(\n    rules: RawRuleFrom<A, Conditions>[] = [],\n    options: AbilityOptions<A, Conditions> = {}\n  ) {\n    this._ruleOptions = {\n      conditionsMatcher: options.conditionsMatcher,\n      fieldMatcher: options.fieldMatcher,\n      resolveAction: options.resolveAction || identity,\n    };\n    Object.defineProperty(this, 'detectSubjectType', {\n      value: options.detectSubjectType || options.subjectName || detectSubjectType\n    });\n    Object.defineProperty(this, 'rules', { get: () => this._rules });\n    this.update(rules);\n  }\n\n  update(rules: RawRuleFrom<A, Conditions>[]): this {\n    const event = { rules, ability: this };\n\n    this._emit('update', event);\n    this._mergedRules = Object.create(null);\n\n    const analyser = new RulesAnalyzer<A, Conditions>(rules.length > 0);\n    const indexedRules = this._buildIndexFor(rules, analyser._analyze);\n\n    analyser._validate(this._ruleOptions);\n    this._indexedRules = indexedRules;\n    this._rules = rules;\n    this._hasPerFieldRules = analyser._hasPerFieldRules;\n    this._emit('updated', event);\n\n    return this;\n  }\n\n  private _buildIndexFor(\n    rawRules: RawRuleFrom<A, Conditions>[],\n    iterator: RuleIterator<A, Conditions> = identity\n  ) {\n    const indexedRules: RuleIndex<A, Conditions> = Object.create(null);\n\n    for (let i = 0; i < rawRules.length; i++) {\n      iterator(rawRules[i], i);\n      const rule = new Rule(rawRules[i], this._ruleOptions);\n      const priority = rawRules.length - i - 1;\n      const actions = wrapArray(rule.action);\n      const subjects = wrapArray(rule.subject);\n\n      for (let k = 0; k < subjects.length; k++) {\n        const subject = this.detectSubjectType(subjects[k]);\n        indexedRules[subject] = indexedRules[subject] || Object.create(null);\n\n        for (let j = 0; j < actions.length; j++) {\n          const action = actions[j];\n          indexedRules[subject][action] = indexedRules[subject][action] || Object.create(null);\n          indexedRules[subject][action][priority] = rule;\n        }\n      }\n    }\n\n    return indexedRules;\n  }\n\n  can(...args: CanParameters<A>): boolean {\n    const rule = this.relevantRuleFor(...args);\n    return !!rule && !rule.inverted;\n  }\n\n  relevantRuleFor(...args: CanParameters<A>) {\n    const rules = this.rulesFor(...args);\n    const subject = args[1];\n\n    for (let i = 0; i < rules.length; i++) {\n      if (rules[i].matchesConditions(subject)) {\n        return rules[i];\n      }\n    }\n\n    return null;\n  }\n\n  possibleRulesFor(...args: CanParameters<A, false>) {\n    const [action, subject] = args;\n    const subjectName = this.detectSubjectType(subject);\n    const mergedRules = this._mergedRules;\n    const key = `${subjectName}_${action}`;\n\n    if (!mergedRules[key]) {\n      mergedRules[key] = this._mergeRulesFor(action as string, subjectName);\n    }\n\n    return mergedRules[key];\n  }\n\n  private _mergeRulesFor(action: Normalize<A>[0], subjectName: string) {\n    const subjects = subjectName === 'all' ? [subjectName] : [subjectName, 'all'];\n    const mergedRules = subjects.reduce((rules, subjectType) => {\n      const subjectRules = this._indexedRules[subjectType];\n\n      if (!subjectRules) {\n        return rules;\n      }\n\n      return Object.assign(rules, subjectRules[action], subjectRules.manage);\n    }, []);\n\n    // TODO: think whether there is a better way to prioritize rules\n    // or convert sparse array to regular one\n    return mergedRules.filter(Boolean);\n  }\n\n  rulesFor(...args: CanParameters<A>) {\n    const [action, subject, field] = args;\n    const rules: Rule<A, Conditions>[] = (this as any).possibleRulesFor(action, subject);\n\n    if (field && typeof field !== 'string') {\n      throw new Error('The 3rd, `field` parameter is expected to be a string. See https://stalniy.github.io/casl/en/api/casl-ability#can-of-pure-ability for details');\n    }\n\n    if (!this._hasPerFieldRules) {\n      return rules;\n    }\n\n    return rules.filter(rule => rule.matchesField(field));\n  }\n\n  cannot(...args: CanParameters<A>): boolean {\n    return !this.can(...args);\n  }\n\n  on<T extends keyof EventsMap<this>>(\n    event: T,\n    handler: EventHandler<EventsMap<this>[T]>\n  ): Unsubscribe {\n    const events = this._events;\n    let isAttached = true;\n\n    if (!events[event]) {\n      events[event] = [];\n    }\n\n    events[event].push(handler);\n\n    return () => {\n      if (isAttached) {\n        const index = events[event].indexOf(handler);\n        events[event].splice(index, 1);\n        isAttached = false;\n      }\n    };\n  }\n\n  private _emit<T extends keyof EventsMap<this>>(eventName: T, event: EventsMap<this>[T]) {\n    const handlers = this._events[eventName];\n\n    if (handlers) {\n      handlers.slice(0).forEach(handler => handler(event));\n    }\n  }\n}\n","import {\n  Query,\n  createQueryTester as sift,\n  $eq,\n  $ne,\n  $lt,\n  $lte,\n  $gt,\n  $gte,\n  $in,\n  $nin,\n  $all,\n  $size,\n  $regex,\n  $elemMatch,\n  $exists\n} from 'sift';\nimport { ConditionsMatcher as Matcher } from '../types';\n\nconst defaultOperations = {\n  $eq,\n  $ne,\n  $lt,\n  $lte,\n  $gt,\n  $gte,\n  $in,\n  $nin,\n  $all,\n  $size,\n  $regex,\n  $elemMatch,\n  $exists,\n};\n\ntype RegExpOptions<T> = { $regex: T, $options?: string };\ntype Primitive = Record<PropertyKey, any> | string | number | null | boolean | undefined;\nexport type MongoQueryOperators = {\n  $eq?: any,\n  $ne?: any,\n  $lt?: string | number | Date,\n  $lte?: string | number | Date,\n  $gt?: string | number | Date,\n  $gte?: string | number | Date,\n  $in?: any[],\n  $nin?: any[],\n  $all?: any[],\n  /** checks by array length */\n  $size?: number,\n  $regex?: RegExp | RegExpOptions<string> | RegExpOptions<RegExp>,\n  /** checks the shape of array item */\n  $elemMatch?: {\n    [k in Exclude<keyof MongoQueryOperators, '$elemMatch'>]?: MongoQueryOperators[k]\n  },\n  /** checks that property exists */\n  $exists?: boolean\n};\n\nexport type MongoQuery<AdditionalOperators = never> =\n  Record<PropertyKey, MongoQueryOperators | Primitive | AdditionalOperators>;\nexport function buildMongoQueryMatcher<T extends object>(\n  operations: Record<keyof T, any>\n): Matcher<MongoQuery | T> {\n  const options = { operations: { ...defaultOperations, ...operations } };\n  return conditions => sift(conditions as unknown as Query, options);\n}\nexport const mongoQueryMatcher = buildMongoQueryMatcher({});\n","import { FieldMatcher } from '../types';\n\nconst REGEXP_SPECIAL_CHARS = /[-/\\\\^$+?.()|[\\]{}]/g;\nconst REGEXP_ANY = /\\.?\\*+\\.?/g;\nconst REGEXP_STARS = /\\*+/;\nconst REGEXP_DOT = /\\./g;\n\nfunction detectRegexpPattern(match: string, index: number, string: string): string {\n  const quantifier = string[0] === '*' || match[0] === '.' && match[match.length - 1] === '.'\n    ? '+'\n    : '*';\n  const matcher = match.indexOf('**') === -1 ? '[^.]' : '.';\n  const pattern = match.replace(REGEXP_DOT, '\\\\$&')\n    .replace(REGEXP_STARS, matcher + quantifier);\n\n  return index + match.length === string.length ? `(?:${pattern})?` : pattern;\n}\n\nfunction escapeRegexp(match: string, index: number, string: string): string {\n  if (match === '.' && (string[index - 1] === '*' || string[index + 1] === '*')) {\n    return match;\n  }\n\n  return `\\\\${match}`;\n}\n\nfunction createPattern(fields: string[]) {\n  const patterns = fields.map(field => field\n    .replace(REGEXP_SPECIAL_CHARS, escapeRegexp)\n    .replace(REGEXP_ANY, detectRegexpPattern));\n  const pattern = patterns.length > 1 ? `(?:${patterns.join('|')})` : patterns[0];\n\n  return new RegExp(`^${pattern}$`);\n}\n\nexport const fieldPatternMatcher: FieldMatcher = (fields) => {\n  let pattern: RegExp | null;\n\n  return (field) => {\n    if (typeof pattern === 'undefined') {\n      pattern = fields.join('').indexOf('*') === -1\n        ? null\n        : createPattern(fields);\n    }\n\n    if (pattern === null || field.indexOf('*') !== -1) {\n      return fields.indexOf(field) !== -1;\n    }\n\n    return pattern.test(field);\n  };\n};\n","import { PureAbility, AbilityOptions } from './PureAbility';\nimport { AbilityTuple } from './types';\nimport { MongoQuery, mongoQueryMatcher } from './matchers/conditions';\nimport { RawRuleFrom } from './RawRule';\nimport { fieldPatternMatcher } from './matchers/field';\n\nexport class Ability<\n  A extends AbilityTuple = AbilityTuple,\n  C extends MongoQuery<any> = MongoQuery\n> extends PureAbility<A, C> {\n  constructor(rules?: RawRuleFrom<A, C>[], options?: AbilityOptions<A, C>) {\n    super(rules, {\n      conditionsMatcher: mongoQueryMatcher,\n      fieldMatcher: fieldPatternMatcher,\n      ...options,\n    });\n  }\n}\n\nexport type AnyMongoAbility = Ability<any, MongoQuery>;\n","import { Ability, AnyMongoAbility } from './Ability';\nimport { AnyAbility, RawRuleOf, AbilityOptionsOf, Generics, AbilityClass, PureAbility } from './PureAbility';\nimport {\n  ExtractSubjectType as E,\n  AbilityTuple,\n  SubjectType,\n  AbilityTypes,\n  ToAbilityTypes,\n  AbilityParameters\n} from './types';\nimport { RawRule } from './RawRule';\n\nclass RuleBuilder<T extends RawRule<any, any>> {\n  public rule!: T;\n\n  constructor(rule: T) {\n    this.rule = rule;\n  }\n\n  because(reason: string): this {\n    this.rule.reason = reason;\n    return this;\n  }\n}\n\ntype CanFunction<T extends AbilityTypes, C, WithFields = true> = T extends AbilityTuple\n  ? WithFields extends true\n    // eslint-disable-next-line max-len\n    ? (action: T[0] | T[0][], subject: E<T[1]> | E<T[1]>[], fields?: string | string[], conditions?: C) => 0\n    : (action: T[0] | T[0][], subject: E<T[1]> | E<T[1]>[], conditions?: C) => 0\n  : never;\n\nexport type BuilderCanParameters<T extends AnyAbility, WithFields extends boolean = false> =\n  AbilityParameters<\n  Generics<T>['abilities'],\n  CanFunction<ToAbilityTypes<Generics<T>['abilities']>, Generics<T>['conditions'], WithFields>,\n  (action: Generics<T>['abilities'] | Generics<T>['abilities'][]) => 0\n  >;\n\nexport class AbilityBuilder<T extends AnyAbility = PureAbility> {\n  public rules: RawRuleOf<T>[] = [];\n  private _AbilityType!: AbilityClass<T>;\n\n  constructor(AbilityType: AbilityClass<T> = PureAbility as AbilityClass<T>) {\n    this._AbilityType = AbilityType;\n    const self = this as any;\n    self.can = self.can.bind(self);\n    self.cannot = self.cannot.bind(self);\n    self.build = self.build.bind(self);\n  }\n\n  can(...args: BuilderCanParameters<T>): RuleBuilder<RawRuleOf<T>>\n  can(...args: BuilderCanParameters<T, true>): RuleBuilder<RawRuleOf<T>>\n  can(\n    action: string | string[],\n    subject?: SubjectType | SubjectType[],\n    conditionsOrFields?: string | string[] | Generics<T>['conditions'],\n    conditions?: Generics<T>['conditions'],\n  ): RuleBuilder<RawRuleOf<T>> {\n    const rule = { action } as RawRuleOf<T>;\n\n    if (subject) {\n      rule.subject = subject;\n\n      if (Array.isArray(conditionsOrFields) || typeof conditionsOrFields === 'string') {\n        rule.fields = conditionsOrFields;\n      } else if (typeof conditionsOrFields !== 'undefined') {\n        rule.conditions = conditionsOrFields;\n      }\n\n      if (typeof conditions !== 'undefined') {\n        rule.conditions = conditions;\n      }\n    }\n\n    this.rules.push(rule);\n\n    return new RuleBuilder(rule);\n  }\n\n  cannot(...args: BuilderCanParameters<T>): RuleBuilder<RawRuleOf<T>>\n  cannot(...args: BuilderCanParameters<T, true>): RuleBuilder<RawRuleOf<T>>\n  cannot(\n    action: string | string[],\n    subject?: SubjectType | SubjectType[],\n    conditionsOrFields?: string | string[] | Generics<T>['conditions'],\n    conditions?: Generics<T>['conditions'],\n  ): RuleBuilder<RawRuleOf<T>> {\n    const builder = (this as any).can(action, subject, conditionsOrFields, conditions);\n    builder.rule.inverted = true;\n    return builder;\n  }\n\n  build(options?: AbilityOptionsOf<T>): T {\n    return new this._AbilityType(this.rules, options);\n  }\n}\n\ntype AsyncDSL<T extends AnyMongoAbility> = (\n  can: AbilityBuilder<T>['can'],\n  cannot: AbilityBuilder<T>['cannot']\n) => Promise<void>;\ntype DSL<T extends AnyMongoAbility> = (...args: Parameters<AsyncDSL<T>>) => void;\n\nexport function defineAbility<T extends AnyMongoAbility = Ability>(\n  dsl: AsyncDSL<T>\n): Promise<T>;\nexport function defineAbility<T extends AnyMongoAbility = Ability>(\n  params: AbilityOptionsOf<T>,\n  dsl: AsyncDSL<T>\n): Promise<T>;\nexport function defineAbility<T extends AnyMongoAbility = Ability>(\n  dsl: DSL<T>\n): T;\nexport function defineAbility<T extends AnyMongoAbility = Ability>(\n  params: AbilityOptionsOf<T>,\n  dsl: DSL<T>\n): T;\nexport function defineAbility<T extends AnyMongoAbility = Ability>(\n  params: AbilityOptionsOf<T> | DSL<T> | AsyncDSL<T>,\n  dsl?: DSL<T> | AsyncDSL<T>\n): T | Promise<T> {\n  let options: AbilityOptionsOf<T>;\n  let define: DSL<T> | AsyncDSL<T>;\n\n  if (typeof params === 'function') {\n    define = params;\n    options = {};\n  } else if (typeof dsl === 'function') {\n    options = params;\n    define = dsl;\n  } else {\n    throw new Error('`defineAbility` expects to receive either options and dsl function or only dsl function');\n  }\n\n  const builder = new AbilityBuilder<T>(Ability as AbilityClass<T>);\n  const result = define(builder.can, builder.cannot);\n\n  return result && typeof result.then === 'function'\n    ? result.then(() => builder.build(options))\n    : builder.build(options);\n}\n","import { AnyAbility, Generics } from './PureAbility';\nimport { Normalize } from './types';\n\nexport type GetErrorMessage = (error: ForbiddenError<AnyAbility>) => string;\nexport const getDefaultErrorMessage: GetErrorMessage = error => `Cannot execute \"${error.action}\" on \"${error.subjectType}\"`;\n\nconst NativeError = function NError(this: Error, message: string) {\n  this.message = message;\n} as unknown as new (message: string) => Error;\n\nNativeError.prototype = Object.create(Error.prototype);\n\nexport class ForbiddenError<T extends AnyAbility> extends NativeError {\n  public readonly ability: T;\n  public action!: Normalize<Generics<T>['abilities']>[0];\n  public subject!: Generics<T>['abilities'][1];\n  public field?: string;\n  public subjectType!: string;\n\n  static _defaultErrorMessage = getDefaultErrorMessage;\n\n  static setDefaultMessage(messageOrFn: string | GetErrorMessage) {\n    this._defaultErrorMessage = typeof messageOrFn === 'string' ? () => messageOrFn : messageOrFn;\n  }\n\n  static from<T extends AnyAbility>(ability: T) {\n    return new this(ability);\n  }\n\n  private constructor(ability: T) {\n    super('');\n    this.ability = ability;\n\n    if (typeof Error.captureStackTrace === 'function') {\n      this.name = 'ForbiddenError';\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n  setMessage(message: string) {\n    this.message = message;\n    return this;\n  }\n\n  throwUnlessCan(...args: Parameters<T['can']>) {\n    const rule = this.ability.relevantRuleFor(...args);\n\n    if (rule && !rule.inverted) {\n      return;\n    }\n\n    this.action = args[0];\n    this.subject = args[1];\n    this.subjectType = this.ability.detectSubjectType(args[1]);\n    this.field = args[2];\n\n    const reason = rule ? rule.reason : '';\n    // eslint-disable-next-line no-underscore-dangle\n    this.message = this.message || reason || (this.constructor as any)._defaultErrorMessage(this);\n    throw this; // eslint-disable-line\n  }\n}\n"],"names":["wrapArray","value","Array","isArray","TYPE_FIELD","setSubjectType","type","object","hasOwnProperty","Error","Object","defineProperty","detectSubjectType","subject","Type","constructor","modelName","name","identity","x","createAliasResolver","aliasMap","process","env","NODE_ENV","manage","keys","forEach","alias","indexOf","assertAliasMap","action","rawActions","actions","i","length","concat","expandActions","Rule","rule","options","_matchConditions","_matchField","resolveAction","inverted","conditions","reason","fields","undefined","console","warn","this","conditionsMatcher","fieldMatcher","matchesConditions","matchesField","field","RulesAnalyzer","hasRules","_isAllInverted","_hasPerFieldRules","_hasRuleWithEmptyFields","_analyze","bind","_validate","ruleOptions","PureAbility","rules","_mergedRules","_events","create","_indexedRules","_rules","_ruleOptions","subjectName","get","update","event","ability","_emit","analyser","indexedRules","_buildIndexFor","rawRules","iterator","priority","subjects","k","j","can","args","relevantRuleFor","rulesFor","possibleRulesFor","mergedRules","key","_mergeRulesFor","reduce","subjectType","subjectRules","assign","filter","Boolean","cannot","on","handler","events","isAttached","push","index","splice","eventName","handlers","slice","defaultOperations","$eq","$ne","$lt","$lte","$gt","$gte","$in","$nin","$all","$size","$regex","$elemMatch","$exists","buildMongoQueryMatcher","operations","sift","mongoQueryMatcher","REGEXP_SPECIAL_CHARS","REGEXP_ANY","REGEXP_STARS","REGEXP_DOT","detectRegexpPattern","match","string","quantifier","matcher","pattern","replace","escapeRegexp","fieldPatternMatcher","join","patterns","map","RegExp","createPattern","test","Ability","RuleBuilder","because","AbilityBuilder","AbilityType","_AbilityType","build","conditionsOrFields","builder","defineAbility","params","dsl","define","result","then","getDefaultErrorMessage","error","NativeError","message","prototype","ForbiddenError","messageOrFn","_defaultErrorMessage","captureStackTrace","setMessage","throwUnlessCan"],"mappings":"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"}